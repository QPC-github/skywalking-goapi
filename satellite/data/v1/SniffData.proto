/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

syntax = "proto3";

package skywalking.v3;

option go_package = "skywalking.apache.org/repo/goapi/satellite/data/v1";

import "language-agent/CLRMetric.proto";
import "language-agent/JVMMetric.proto";
import "language-agent/Meter.proto";
import "language-agent/Tracing.proto";
import "language-agent/ConfigurationDiscoveryService.proto";
import "logging/Logging.proto";
import "management/Management.proto";
import "profile/Profile.proto";
import "service-mesh-probe/service-mesh.proto";
import "event/Event.proto";
import "common/Common.proto";

import "envoy/service/accesslog/v2/als.proto";
import "envoy/service/accesslog/v3/als.proto";
import "envoy/service/metrics/v2/metrics_service.proto";
import "envoy/service/metrics/v3/metrics_service.proto";

// SniffType declares the supported transfer data type.
enum SniffType {
  CLRMetricType = 0;
  JVMMetricType = 1;
  MeterType = 2;
  TracingType = 3;
  Logging = 4;
  ManagementType = 5;
  ProfileType = 6;
  ServiceMeshType = 7;
  EventType = 8;
  ConfigurationDiscoveryServiceType = 9;
  EnvoyAlsV2Type = 10;
  EnvoyAlsV3Type = 11;
  EnvoyMetricsV2Type = 12;
  EnvoyMetricsV3Type = 13;
}

// SniffData is the transfer unit in Satellite.
message SniffData {

  // The occur time.
  int64 timestamp = 1;
  // unique event name.
  string name = 2;
  // The data type.
  SniffType type = 3;
  // Whether to send to remote. It is used in sampling.
  bool remote = 4;
  // Additional meta-information.
  map<string, string> meta = 5;

  // Transfer data.
  oneof data{
    CLRMetricCollection clr = 6;
    JVMMetricCollection jvm = 7;
    MeterData meter = 8;
    SegmentObject segment = 9;
    LogData log = 10;
    InstanceProperties instance = 11;
    ThreadSnapshot profile = 12;
    ServiceMeshMetric serviceMesh = 13;
    Event event = 14;
    InstancePingPkg instancePing = 15;
    ProfileTaskCommandQuery profileTaskQuery = 16;
    ProfileTaskFinishReport profileTaskFinish = 17;
    Commands commands = 18;
    ConfigurationSyncRequest configurationSyncRequest = 19;
    envoy.service.accesslog.v2.StreamAccessLogsMessage envoyAlsV2 = 20;
    envoy.service.accesslog.v3.StreamAccessLogsMessage envoyAlsV3 = 21;
    envoy.service.metrics.v2.StreamMetricsMessage envoyMetricsV2 = 22;
    envoy.service.metrics.v3.StreamMetricsMessage envoyMetricsV3 = 23;
  }
}
